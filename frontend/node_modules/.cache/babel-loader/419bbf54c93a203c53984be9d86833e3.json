{"remainingRequest":"/home/rsi96/praca_magisterska/frontend/node_modules/babel-loader/lib/index.js!/home/rsi96/praca_magisterska/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/rsi96/praca_magisterska/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rsi96/praca_magisterska/frontend/src/views/RunML.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rsi96/praca_magisterska/frontend/src/views/RunML.vue","mtime":1631907146557},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3JzaTk2L3ByYWNhX21hZ2lzdGVyc2thL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgSFRUUCB9IGZyb20gIi4uL2h0dHAtY29tbW9uIjsgLy9pbXBvcnQgQ2hhcnQgZnJvbSAiLi4vY29tcG9uZW50cy9DaGFydCI7Ci8vaW1wb3J0IExpbmVDaGFydCBmcm9tICcuLi9jb21wb25lbnRzL0xpbmVDaGFydC52dWUnCgppbXBvcnQgVnVlQXBleENoYXJ0cyBmcm9tICd2dWUtYXBleGNoYXJ0cyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAicnVuTUwiLAogIGNvbXBvbmVudHM6IHsKICAgIC8vaGlnaGNoYXJ0czogQ2hhcnQsCiAgICAvL0xpbmVDaGFydAogICAgYXBleGNoYXJ0czogVnVlQXBleENoYXJ0cwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0T3B0aW9uczogewogICAgICAgIGNoYXJ0OiB7CiAgICAgICAgICBpZDogJ3Z1ZWNoYXJ0LWV4YW1wbGUnCiAgICAgICAgfSwKICAgICAgICB5YXhpczogewogICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgdGV4dDogJ1ZhbHVlcycKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAnVmlzdWFsaXphdGlvbiBvZiBwcmVkaWN0ZWQgdmFsdWVzJywKICAgICAgICAgIGFsaWduOiAnY2VudGVyJwogICAgICAgIH0KICAgICAgfSwKICAgICAgc2VyaWVzOiBbewogICAgICAgIG5hbWU6ICd5X3Rlc3QnLAogICAgICAgIGRhdGE6IFtdCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAneV9wcmVkJywKICAgICAgICBkYXRhOiBbXQogICAgICB9XSwKICAgICAgc2VsZWN0ZWRQYWlyOiB7CiAgICAgICAgaWQ6IDIsCiAgICAgICAgY29sdW1uX25hbWU6ICdSYWluVG9tb3Jyb3cnLAogICAgICAgIGRhdGFzZXRfbmFtZTogJ3dlYXRoZXJBVVMuY3N2JwogICAgICB9LAogICAgICBzZWxlY3RlZEFsZ2hvcml0bTogJ1JhbmRvbUZvcmVzdFJlZ3Jlc3NvcicsCiAgICAgIHBhaXJMaXN0OiBbewogICAgICAgIGlkOiAxLAogICAgICAgIGNvbHVtbl9uYW1lOiAnRGVmYXVsdCcsCiAgICAgICAgZGF0YXNldF9uYW1lOiAnRGVmYXVsdERhdGFzZXQnCiAgICAgIH0sIHsKICAgICAgICBpZDogMiwKICAgICAgICBjb2x1bW5fbmFtZTogJ0RlZmF1bHQyJywKICAgICAgICBkYXRhc2V0X25hbWU6ICdEZWZhdWx0RGF0YXNldDInCiAgICAgIH1dLAogICAgICBhbGdob3JpdG1MaXN0OiBbewogICAgICAgIHRleHQ6ICdMaW5lYXJSZWdyZXNzaW9uJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1JhbmRvbUZvcmVzdFJlZ3Jlc3NvcicKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdLTmVpZ2hib3JzQ2xhc3NpZmllcicKICAgICAgfV0sCiAgICAgIHJlc3VsdDoge30KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBydW5NTDogZnVuY3Rpb24gcnVuTUwoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIEhUVFAucG9zdCgicnVuTUwiLCB7CiAgICAgICAgICAgICAgICAgIGNvbHVtbl9uYW1lOiBfdGhpcy5zZWxlY3RlZFBhaXIuY29sdW1uX25hbWUsCiAgICAgICAgICAgICAgICAgIGRhdGFzZXRfbmFtZTogX3RoaXMuc2VsZWN0ZWRQYWlyLmRhdGFzZXRfbmFtZSwKICAgICAgICAgICAgICAgICAgYWxnaG9yaXRtX25hbWU6IF90aGlzLnNlbGVjdGVkQWxnaG9yaXRtCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMucmVzdWx0ID0gcmVzcG9uc2UuZGF0YSwgX3RoaXMuc2VyaWVzID0gW3sKICAgICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YS55X3Rlc3Quc2xpY2UoMCwgMTAwKQogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICBkYXRhOiByZXNwb25zZS5kYXRhLnlfcHJlZC5zbGljZSgwLCAxMDApCiAgICAgICAgICAgICAgICB9XTsKICAgICAgICAgICAgICAgIF90aGlzLnJlc3VsdC5yZXN1bHQgPSBfdGhpcy5yZXN1bHQucmVzdWx0LnRvRml4ZWQoMik7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgICAgIF90aGlzLmVycm9ycy5wdXNoKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgOF1dKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBIVFRQLmdldCgiZ2V0RGlzdGluY3RQYWlycyIpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgX3RoaXMyLnBhaXJMaXN0ID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgIF90aGlzMi5lcnJvcnMucHVzaChfY29udGV4dDIudDApOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"sources":["RunML.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"page\">\n    <h2>Run and visualize</h2>\n    <br>\n    <div class=\"row justify-content-center\">\n    <div class=\"col-lg-6 col-md-6 col-sm-4\" >\n      <h3>Select Dataset and Column</h3>\n      <select class=\"form-select\" v-model=\"selectedPair\">\n        <option v-for=\"option in pairList\" :key=\"option.id\" :value=\"{column_name: option.column_name, dataset_name: option.dataset_name }\" >\n          <span>Dataset: {{ option.dataset_name}}</span>, Column Name: {{ option.column_name }}\n        </option>\n      </select>\n      <br>\n      <span>Selected Column Name: {{ selectedPair.column_name }} and Dataset: {{ selectedPair.dataset_name}}</span>\n    </div>\n    </div>\n    <br>\n    <div class=\"row justify-content-center\">\n    <div class=\"col-lg-6 col-md-6 col-sm-4\" >\n      <h3>Select Alghoritm</h3>\n      <select class=\"form-select\" v-model=\"selectedAlghoritm\">\n        <option v-for=\"option in alghoritmList\" :key=\"option.text\" :value=\"option.text\">\n          {{ option.text }}\n        </option>\n      </select>\n      <br>\n      <span>Selected Alghoritm: {{ selectedAlghoritm }}</span>\n    </div>\n    </div>\n    <div>\n      <br>\n      <button type=\"button\" class=\"btn btn-dark\" v-on:click=\"runML()\">Run ML alghoritm</button>\n      <br>\n      <div>\n        <br>\n        <h3>Result: {{ result.result }}%</h3>\n        <br>\n      </div>\n      <div class=\"row justify-content-center\">\n        <div class=\"col-lg-6 col-md-6 col-sm-6\">\n          <apexcharts type=\"line\" :options=\"chartOptions\" :series=\"series\"></apexcharts>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\n//import axios from 'axios';\nimport { HTTP } from \"../http-common\";\n//import Chart from \"../components/Chart\";\n\n//import LineChart from '../components/LineChart.vue'\n\nimport VueApexCharts from 'vue-apexcharts'\n\nexport default {\n  name: \"runML\",\n  components: {\n    //highcharts: Chart,\n    //LineChart\n    apexcharts: VueApexCharts,\n  },\n  data() {\n    return {\n        chartOptions: {\n          chart: {\n            id: 'vuechart-example',\n          },\n            yaxis: {\n              title: {\n                text: 'Values'\n              },\n            },\n              title: {\n              text: 'Visualization of predicted values',\n              align: 'center'\n            },\n        },\n        series: [{\n          name: 'y_test',\n          data: []\n        },\n        {\n          name: 'y_pred',\n          data: []\n        }],\n\n\n\n        selectedPair: {id: 2, column_name: 'RainTomorrow', dataset_name:'weatherAUS.csv'},\n        selectedAlghoritm: 'RandomForestRegressor',\n        pairList: [\n        {id: 1, column_name: 'Default', dataset_name:'DefaultDataset'},\n        {id: 2, column_name: 'Default2', dataset_name:'DefaultDataset2'}\n        ],\n        alghoritmList: [\n        {text: 'LinearRegression'},\n        {text: 'RandomForestRegressor'},\n        {text: 'KNeighborsClassifier'}\n      ],\n        result: {},\n    };\n  },\n\n  methods: {\n    async runML() {\n      try {\n        const response = await HTTP.post(\"runML\", {\n              column_name: this.selectedPair.column_name,\n              dataset_name: this.selectedPair.dataset_name,\n              alghoritm_name: this.selectedAlghoritm\n            })\n          this.result = response.data,\n          this.series = [{\n          data: response.data.y_test.slice(0, 100)\n          },\n          {\n          data: response.data.y_pred.slice(0, 100)\n          }]\n          this.result.result = this.result.result.toFixed(2)\n      } catch (e) {\n        this.errors.push(e)\n        }\n\n      },\n\n  },\n    async created() {\n        try {\n            const response = await HTTP.get(`getDistinctPairs`)\n            this.pairList = response.data\n        } catch (e) {\n            this.errors.push(e)\n        }\n    }\n};\n</script>\n"],"sourceRoot":"src/views"}]}