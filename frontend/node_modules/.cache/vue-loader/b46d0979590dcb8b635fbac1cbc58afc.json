{"remainingRequest":"/home/rsi96/praca_magisterska/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rsi96/praca_magisterska/frontend/src/views/RunML.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/rsi96/praca_magisterska/frontend/src/views/RunML.vue","mtime":1630531432915},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rsi96/praca_magisterska/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zbWFsbCB7CiAgbWF4LXdpZHRoOiA2MDBweDsKICBtYXJnaW46ICAxNTBweCBhdXRvOwp9Cg=="},{"version":3,"sources":["RunML.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuJA;AACA;AACA;AACA","file":"RunML.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"page\">\n    <h2>Run alghoritms here</h2>\n\n    <div>\n      <select v-model=\"selectedPair\">\n        <option v-for=\"option in pairList\" :key=\"option.id\" :value=\"{column_name: option.column_name, dataset_name: option.dataset_name }\" >\n          {{ option }}\n        </option>\n      </select>\n      <br>\n      <span>Selected: {{ selectedPair }}</span>\n        <br>\n      <span>cl: {{ selectedPair.column_name }}</span>\n    </div>\n    <div>\n      <select v-model=\"selectedAlghoritm\">\n        <option v-for=\"option in alghoritmList\" :key=\"option.text\" :value=\"option.text\">\n          {{ option.text }}\n        </option>\n      </select>\n      <span>Selected: {{ selectedAlghoritm }}</span>\n    </div>\n    <div>\n      <button v-on:click=\"runML()\">Baton</button>\n      <br>\n  <div class=\"container\">\n    <line-chart\n      v-if=\"loaded\"\n      :chartdata=\"chartdata\"\n      :options=\"options\"/>\n  </div>\n      <br>\n      <span>Result: {{ result.result }}</span>\n      <br>\n      <span>y_test: {{ y_series_1 }}</span>\n      <br>\n      <span>y_pred: {{ y_series_2 }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\n//import axios from 'axios';\nimport { HTTP } from \"../http-common\";\n//import Chart from \"../components/Chart\";\n\nimport LineChart from '../components/LineChart.vue'\n\n\nexport default {\n  name: \"runML\",\n  components: {\n    //highcharts: Chart,\n    LineChart\n  },\n  data() {\n    return {\n        loaded: false,\n        chartdata: null,\n        selectedPair: {id: 2, column_name: 'RainTomorrow', dataset_name:'weatherAUS.csv'},\n        selectedAlghoritm: 'RandomForestRegressor',\n        pairList: [\n        {id: 1, column_name: 'Default', dataset_name:'DefaultDataset'},\n        {id: 2, column_name: 'Default2', dataset_name:'DefaultDataset2'}\n        ],\n        alghoritmList: [\n        {text: 'LinearRegression'},\n        {text: 'RandomForestRegressor'},\n        {text: 'KNeighborsClassifier'}\n      ],\n        result: {},\n        y_series_11: [],\n        y_series_2: []\n    };\n  },\n  async mounted () {\n    this.loaded = false\n    try {\n        const response = await HTTP.post(\"runML\", {\n              column_name: this.selectedPair.column_name,\n              dataset_name: this.selectedPair.dataset_name,\n              alghoritm_name: this.selectedAlghoritm\n            })\n          this.result = response.data,\n          this.y_series_11 = response.data.y_test\n          this.y_series_2 = response.data.y_pred\n    } catch (e) {\n      console.error(e)\n    }\n  },\n  computed: {\n    y_series_1: function () {\n      const toNumbers = arr => arr.map(Number);\n      return toNumbers(this.y_series_11)\n    }\n  },\n  methods: {\n\n    // runML() {\n    //   axios\n    //     .post(\"http://localhost:5000/runML\", {\n    //           column_name: this.selectedPair.column_name,\n    //           dataset_name: this.selectedPair.dataset_name,\n    //           alghoritm_name: this.selectedAlghoritm\n    //         })\n    //     .then(response => (this.result = response.data,\n    //                       this.y_series_11 = response.data.y_test))\n    //     .then(response => (console.log(response.data)))\n    //     .catch(error => console.log(error))\n    //     ;\n    // },\n    async runML() {\n      try {\n        const response = await HTTP.post(\"runML\", {\n              column_name: this.selectedPair.column_name,\n              dataset_name: this.selectedPair.dataset_name,\n              alghoritm_name: this.selectedAlghoritm\n            })\n          this.result = response.data,\n          this.y_series_11 = response.data.y_test\n          this.y_series_2 = response.data.y_pred\n      } catch (e) {\n        this.errors.push(e)\n        }\n    }\n  },\n    async created() {\n        try {\n            const response = await HTTP.get(`getDistinctPairs`)\n            this.pairList = response.data\n        } catch (e) {\n            this.errors.push(e)\n        }\n      //   try {\n      //     const response = await HTTP.post(\"runML\", {\n      //         column_name: this.selectedPair.column_name,\n      //         dataset_name: this.selectedPair.dataset_name,\n      //         alghoritm_name: this.selectedAlghoritm\n      //       })\n      //     this.result = response.data,\n      //     this.y_series_11 = response.data.y_test\n      //     this.y_series_2 = response.data.y_pred\n      // } catch (e) {\n      //   this.errors.push(e)\n      //   }\n    }\n};\n</script>\n\n<style>\n  .small {\n    max-width: 600px;\n    margin:  150px auto;\n  }\n</style>"]}]}